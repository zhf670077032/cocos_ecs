{
  "ver": "1.0.27",
  "uuid": "2395b178-ea26-43f6-8dfe-c6cbecac54e4",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D texture2;\nuniform sampler2D FlowMap;\nuniform float Flow_Intensity;\nuniform float Flow_Speed;\nuniform float time;\nfloat lerp(float a, float b, float t)\n{\n    t = min(1.0, t);\n    return a*(1.0-t)+b*t;\n}\nvec4 lerpV4(vec4 a, vec4 b, float t)\n{\n    vec4 ret = vec4(0.0);\n    ret.r = lerp(a.r, b.r, t);\n    ret.g = lerp(a.g, b.g, t);\n    ret.b = lerp(a.b, b.b, t);\n    ret.a = lerp(a.a, b.a, t);\n    return ret;\n}\nvoid main () {\n  vec2 uv_FlowMap = v_uv0;\n  vec4 tex2DNode1 = texture2D( FlowMap, uv_FlowMap );\n  vec2 appendResult3 = vec2(tex2DNode1.r , 1.0 - tex2DNode1.g);\n  vec2 temp_cast_0 = vec2(0.5,0.5);\n  vec2 temp_output_7_0 = ( appendResult3 - temp_cast_0 ) * Flow_Intensity;\n  float temp_output_11_0 = ( time * Flow_Speed );\n  float temp_output_12_0 = fract( temp_output_11_0 );\n  float temp_output_27_0 = abs( ( temp_output_12_0 - 0.5 ) );\n  float clampResult29 = clamp( ( temp_output_27_0 + temp_output_27_0 ) , 0.0 , 1.0 );\n  vec4 color_1 = texture2D(texture, v_uv0 + (temp_output_7_0 * temp_output_12_0));\n  vec4 color_2 = texture2D(texture2, (temp_output_7_0 * fract(temp_output_11_0 + 0.5)) + v_uv0);\n  vec4 lerpResult24 = lerpV4( color_1, color_2, clampResult29);\n  float lerpResult32 = lerp( color_1.a , color_2.a , clampResult29);\n  gl_FragColor = vec4(lerpResult24.rgb, lerpResult32);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D texture2;\nuniform sampler2D FlowMap;\nuniform Constant {\n  float Flow_Intensity;\n  float Flow_Speed;\n  float time;\n};\nfloat lerp(float a, float b, float t)\n{\n    t = min(1.0, t);\n    return a*(1.0-t)+b*t;\n}\nvec4 lerpV4(vec4 a, vec4 b, float t)\n{\n    vec4 ret = vec4(0.0);\n    ret.r = lerp(a.r, b.r, t);\n    ret.g = lerp(a.g, b.g, t);\n    ret.b = lerp(a.b, b.b, t);\n    ret.a = lerp(a.a, b.a, t);\n    return ret;\n}\nvoid main () {\n  vec2 uv_FlowMap = v_uv0;\n  vec4 tex2DNode1 = texture2D( FlowMap, uv_FlowMap );\n  vec2 appendResult3 = vec2(tex2DNode1.r , 1.0 - tex2DNode1.g);\n  vec2 temp_cast_0 = vec2(0.5,0.5);\n  vec2 temp_output_7_0 = ( appendResult3 - temp_cast_0 ) * Flow_Intensity;\n  float temp_output_11_0 = ( time * Flow_Speed );\n  float temp_output_12_0 = fract( temp_output_11_0 );\n  float temp_output_27_0 = abs( ( temp_output_12_0 - 0.5 ) );\n  float clampResult29 = clamp( ( temp_output_27_0 + temp_output_27_0 ) , 0.0 , 1.0 );\n  vec4 color_1 = texture2D(texture, v_uv0 + (temp_output_7_0 * temp_output_12_0));\n  vec4 color_2 = texture2D(texture2, (temp_output_7_0 * fract(temp_output_11_0 + 0.5)) + v_uv0);\n  vec4 lerpResult24 = lerpV4( color_1, color_2, clampResult29);\n  float lerpResult32 = lerp( color_1.a , color_2.a , clampResult29);\n  gl_FragColor = vec4(lerpResult24.rgb, lerpResult32);\n}"
      }
    }
  ],
  "subMetas": {}
}